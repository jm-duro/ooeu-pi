<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<link rel="stylesheet" type="text/css" href="docs.css">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>RDS Incompatible Features</title>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2006/10/13 at 09h28m39 -->
<style>h4 {text-align: right}</style>
<title>RDS Incompatible Features</title>
</head>
<body>
<div id = "Content">
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<div id="Header"><a name="RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a></div>
<p><h3>eval, var_id, etc
</h3><br>
<p>
These are features that have been added to OOEU that emit IL code that is not compatible with
RDS Euphoria.  This means that you cannot use the preprocessor function with any code
that uses these features.
<p>
If you would like for routine_id() to be able to do forward referencing, change the
value of the constant FORWARD_ROUTINE_ID to TRUE (it's located near the bottom of
global.e).  Doing this doesn't produce incompatible IL code, but causes different
behavior than RDS Euphoria, so your application might not run the same way on OOEU and
RDS Euphoria.

</p>
<li><a href="#CONTINUE"><i>keyword</i> continue</a> &nbsp;&nbsp;
<li><a href="#DUMP_VAR"><i>func</i> dump_vars</a>() &nbsp;&nbsp;
<li><a href="#EVAL"><i>func</i> eval</a>( sequence code ) &nbsp;&nbsp;
<li><a href="#EVAL_ERROR"><i>func</i> eval_error</a>() &nbsp;&nbsp;
<li><a href="#FIND_FROM"><i>func</i> find_from</a>( object x, sequence s, integer i ) &nbsp;&nbsp;
<li><a href="#MATCH_FROM"><i>func</i> match_from</a>( sequence x, sequence s, integer i ) &nbsp;&nbsp;
<li><a href="#READ_VAR"><i>func</i> read_var</a>( integer vid ) &nbsp;&nbsp;
<li><a href="#VAR_ID"><i>func</i> var_id</a>( sequence name ) &nbsp;&nbsp;
<li><a href="#WRITE_VAR"><i>proc</i> write_var</a>( integer vid, object val ) &nbsp;&nbsp;
&nbsp;<br>&nbsp;<br><strong>Subtopics:</strong><br>
<li><a href="PASS_BY_REFERENCE.htm#PASS_BY_REFERENCE">Pass by reference</a>
<li><a href="USING_GOTO.htm#USING_GOTO">Using Gotos</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CONTINUE">[<i>keyword</i>]<br>continue</a> </h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
Used within loops to cease execution of the current loop and jump back to the
 begining of the loop.  Be careful when used in <strong>while</strong> loops, since the loop variable
 isn't automatically changed for each execution of a loop (as <strong>for</strong> variables are), and
you could create an infinite loop.
</p>
<p>See Also: 
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="DUMP_VAR">[<i>func</i>]<br>dump_vars</a> ()</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
Returns a sequence containing information on all variables in the application.
Each element describes one variable, where the sub elements are:
<ul>
 <li> File name
 <li> Scope
<ul>
 <li> Loop
 <li> Private
 <li> Global loop (top level loop variable)
 <li> Local
 <li> Global
 </ul> 
 <li> Variable name
 <li> Type
 <li> Variable id, if it exists (only variables which were previously assigned a
 variable id by a call to <a href="RDS_INCOMPATIBLE_FEATURE.htm#VAR_ID">var_id</a>() will have a valid variable id)
 </ul> 
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="EVAL">[<i>func</i>]<br>eval</a> ( sequence code )</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
Returns 1 if parsing was successful, and the code was executed, or zero if the code had
errors.  You cannot have an eval() statement inside of another eval() statement.  Code
within an eval statement is treated like top level code, except that if you call eval
from within a procedure, the toplevel code will be able to access any loop and private
variables that are within scope.
<p>
You can define procedures, functions and euclasses within an eval, and you can also
include an entirely new file.  Files included through eval will be dynamically added
to the interactive debugger.  Anything defined within an eval will only be in scope
inside of another eval, except that you can set a routine_id so that dynamic routines
may be called from outside of an eval:
<div class="box"><pre>
   integer rid, ok
   ok = eval( "procedure foo()\n" &
              "    puts(1,\"foo!\\n\")\n" &
              "end procedure\n" &
              "rid = routine_id(\"foo\")")
   call_proc( rid, {} )
</pre></div>
<p>
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="EVAL_ERROR">[<i>func</i>]<br>eval_error</a> ()</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
Returns the text of a compile-time error that occured parsing the eval statement.
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="FIND_FROM">[<i>func</i>]<br>find_from</a> ( object x, sequence s, integer i )</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
Extends the native find() function by allowing the specification of an index at
which to start searching.  This function avoids the need to slice the sequence
and adjust the returned index.
<div class="box"><pre>
  ? find_from( x, s, i )  -- this is equivalent to ? find( x, s[i..$] )
</pre></div>
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="MATCH_FROM">[<i>func</i>]<br>match_from</a> ( sequence x, sequence s, integer i )</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
Extends the native match() function by allowing the specification of an index at
which to start searching.  This function avoids the need to slice the sequence
and adjust the returned index.
<div class="box"><pre>
  ? match_from( x, s, i )  -- this is equivalent to ? match( x, s[i..$] )
</pre></div>
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="READ_VAR">[<i>func</i>]<br>read_var</a> ( integer vid )</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
 Returns the value of the variable with the variable id <em>vid</em>.
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#VAR_ID">var_id</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="VAR_ID">[<i>func</i>]<br>var_id</a> ( sequence name )</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
 Returns a variable id that can be used with <a href="#READ_VARIABLE">read_variable</a>() and <a href="#WRITE_VARIABLE">write_variable</a>().
Unlike routine_id(), var_id() can forward reference variables.  This is necessary
 in order to expose variables created in a call to <a href="RDS_INCOMPATIBLE_FEATURE.htm#EVAL">eval</a>().
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#WRITE_VAR">write_var</a>
<hr>
<h4>RDS Incompatible Features<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="WRITE_VAR">[<i>proc</i>]<br>write_var</a> ( integer vid, object val )</h2>
Category: <a href="#RDS_INCOMPATIBLE_FEATURE">RDS Incompatible Features</a><br>
</p>
<p><p><p>
 Sets the value of the variable with variable id <em>vid</em> to <em>val</em>.
</p>
<p>See Also: 
<a href="#CONTINUE">continue</a>,
<a href="#DUMP_VAR">dump_vars</a>,
<a href="#EVAL">eval</a>,
<a href="#EVAL_ERROR">eval_error</a>,
<a href="#FIND_FROM">find_from</a>,
<a href="#MATCH_FROM">match_from</a>,
<a href="#READ_VAR">read_var</a>,
<a href="#VAR_ID">var_id</a>
<hr>
