<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<link rel="stylesheet" type="text/css" href="docs.css">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Class Specification</title>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2006/10/13 at 09h28m39 -->
<style>h4 {text-align: right}</style>
<title>Class Specification</title>
</head>
<body>
<div id = "Content">
<h4>Class Specification<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<div id="Header"><a name="CLASS_SPECIFICATION">Class Specification</a></div>
<p><h3>How to declare a class
</h3><br>
<p>
 Classes are defined within a euclass/end euclass structure, similar to a routine. 
 Within the euclass/end euclass, data members and methods may be defined.  Members 
may be defined anywhere in a class specification (i.e., they can appear after methods
are defined.  Members may be of any type, including other classes.  The class data
type must be a sequence if you define any data members, because the members are elements
in the sequence.  In fact, the preprocessor simply maps these to constants, which are
used to subscript the class instance.
<p>
Classes which are derived from other classes inherit all methods and members.  You can
overload methods.  It is possible, though questionable, to duplicate an inherited member.
The member that was the last declared will always have precedence.  The only way to access
the inherited member is to explicitly subscript (see section on Dot Notation).
<p>
You can specify the return type of a member function by adding a colon (':') followed by
the type after the function name.  This will be used for polymorphism purposes when a
member function is used as an argument for another method call.
<div class="box"><pre>
global euclass ClassName( ClassDataType x )
	MemberDataType m
	
  function ClassName() : ClassName

  end function

	function fMethod() : sequence
	
	end function
	
	function fMethod( atom a ) : atom
	
	end function
	
	procedure pMethod()
	
	end procedure	

end euclass

ClassName instance
instance = SomeValue

instance.pMethod( instance.fMethod( instance.fMethod() ) )
</pre></div>
To create an instance of a class, declare a variable with the type of the class:
<div class="box"><pre>
  ClassName aClassNameInstance
</pre></div>
You may also declare variables (and members) as 'sequence of' a class type.  This allows
you to refer to elements in the sequence as instances of the specified class:
<div class="box"><pre>
  sequence of SomeClass s
    -- ...
  s[1].Method()
</pre></div>

</p>
<hr>
