<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<link rel="stylesheet" type="text/css" href="docs.css">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Decoration</title>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2006/10/13 at 09h28m39 -->
<style>h4 {text-align: right}</style>
<title>Decoration</title>
</head>
<body>
<div id = "Content">
<h4>Decoration<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<div id="Header"><a name="DECORATION">Decoration</a></div>
<p><h3>How does OOEU manage naming conflicts?
</h3><br>
<p>
All routines in a class get decorated so that proper polymorphism can take place.
An '@' will be appended to the routine name, followed by the datatypes of the
parameters (o: object, a: atom, i: integer, s: sequence, @ClassName@: instance of some class,
!UserDefinedType!: a user defined type).
Also each method will have a 'this' parameter of the class' type automatically added.
It won't show in the source, but can be used (like in C++).  It will show up in any debug reports.
<p>
The routine signatures will be used to allow for a type of polymorphism based on the arguments
supplied.  The best match for the routine will be called.  Since Euphoria isn't very strict with
types, there may be ambiguity as to the actual data types being used.  For instance, you might
use an object parameter, where methods exist for either an atom or a sequence.  Also, since
a function can return anything, any parameter that is created as a temp from a function return
will be treated as an object.  If there are multiple methods that match up equally well, one
will be arbitrarily picked, and a warning will be generated.  You may receive run time
type check errors because of this.
<p>
To get around this limitation, you can specify the return type of a function.  This is used
solely for purposes of polymorphism.  There is no additional type checking of the actual value
returned by your function.  A colon (':') following the function declaration, followed by a
variable type or a euclass name id used to define the return type:
<div class="box"><pre>
ex:
  function foo() : sequence
      return "foo"
  end function

  euclass bar( sequence b )
      function bar() : bar
          return {}
      end function
  end euclass
</pre></div>
You can use routine_id() on methods, but will need to pass the fully decorated routine name
(obviously, this won't work after preprocessing--you'll need to replace all '@'s and '!'s with
'_'s):
<div class="box"><pre>
    id = routine_id( "method@class@a!my_type!si" )
</pre></div>
However, routines in a local class will only be visible from within the file itself, unless
the routine itself is declared global, even if other global classes inherit from the class.
<p>
Data members are decorated with the @ClassName as well.  You can see the subscript value of
a data member in trace mode by displaying ClassName@MemberName as a variable.

</p>
<hr>
