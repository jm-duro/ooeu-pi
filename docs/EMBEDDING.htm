<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<link rel="stylesheet" type="text/css" href="docs.css">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Embedding</title>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2006/10/13 at 09h28m39 -->
<style>h4 {text-align: right}</style>
<title>Embedding</title>
</head>
<body>
<div id = "Content">
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<div id="Header"><a name="EMBEDDING">Embedding</a></div>
<p><h3>Using OOEU in applications
</h3><br>
<p>
You can use OOEU as an embeddable scripting engine for your applications (whether an OOEU or
a normal Euphoria application).  First, you'll need to include eu.e (instead of eu.ex)
 in your application.  Then use <a href="EMBEDDING.htm#EMBED_ROUTINE">embed_routine</a>() to allow scripts to call routines inside of
 your application, and use <a href="EMBEDDING.htm#ILLEGAL_BUILTIN">illegal_builtin</a>() to restrict scripts from calling certain builtin
 routines.  Then you can use <a href="EMBEDDING.htm#DO_EVAL">do_eval</a>() to run scripts.
<p>
 Alternatively, eu.e can be compiled into a dynamic library (see the libooeu.dll/so files provided 
in the binary distribution) and use it that way in order to speed up your scripts' execution.
Instead of including eu.e, simply include libooeu.e, and use it exactly the same way that you would
use eu.e.

</p>
<li><a href="#CLEANUP_DEBUGGER"><i>proc</i> cleanup_debugger</a>() &nbsp;&nbsp;
<li><a href="#CLEAR_ENV"><i>proc</i> clear_env</a>() &nbsp;&nbsp;
<li><a href="#DO_EVAL"><i>func</i> do_eval</a>( sequence eval_code ) &nbsp;&nbsp;
<li><a href="#EMBED_ROUTINE"><i>func</i> embed_routine</a>( sequence name, integer rid, sequence params, integer is_func ) &nbsp;&nbsp;
<li><a href="#GET_CURRENT_ENV"><i>func</i> get_current_env</a>() &nbsp;&nbsp;
<li><a href="#GET_EVAL_ERR"><i>func</i> get_eval_err</a>() &nbsp;&nbsp;
<li><a href="#ILLEGAL_BUILTIN"><i>proc</i> illegal_builtin</a>( sequence builtin ) &nbsp;&nbsp;
<li><a href="#NEW_ENV"><i>func</i> new_env</a>() &nbsp;&nbsp;
<li><a href="#SWITCH_ENV"><i>proc</i> switch_env</a>( integer env ) &nbsp;&nbsp;
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CLEANUP_DEBUGGER">[<i>proc</i>]<br>cleanup_debugger</a> ()</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
<p><p><p>
If your scripting uses the debugger, you should call this routine before your program
exits in order to cleanly shut down the debugger.  Failure to do so could cause a machine
exception to occur when your application closes.
</p>
<p>See Also: 
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CLEAR_ENV">[<i>proc</i>]<br>clear_env</a> ()</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
Resets the current scripting environment.  This allows an application to recycle scripting
environments and avoid leaking resources by simply adding new scripting environments as
they are needed.
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="DO_EVAL">[<i>func</i>]<br>do_eval</a> ( sequence eval_code )</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
This is the function that will run embedded OOEU code.  The code
should be passed as a sequence of text with '\n's breaking up lines.
If a routine is passed, the entire routine should be passed at once,
or an error will result.  If any errors were encountered, the return
value will be zero.  If there were no errors, the return value will
be 1.
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="EMBED_ROUTINE">[<i>func</i>]<br>embed_routine</a> ( sequence name, integer rid, sequence params, integer is_func )</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
This function is used to allow scripts to call routines in your application.  The
parameter values should be as follows:
<ul>
 <li> <strong>name</strong>  The name of the routine as it will be called from within the script.
 <li> <strong>rid</strong>   The routine_id of your routine in your application.
 <li> <strong>params</strong> A sequence indicating the proper parameters for your routine, where each
parameter is represented by the first letter of the variable type.  So "aaso" would mean
that two atoms, a sequence and an object would be passed.
 <li> <strong>is_func</strong> Denotes whether your routine is a function (1) or a procedure (0)
 </ul> 
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GET_CURRENT_ENV">[<i>func</i>]<br>get_current_env</a> ()</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
Returns the handle for the currently active scripting environment.
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GET_EVAL_ERR">[<i>func</i>]<br>get_eval_err</a> ()</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
This function will return a sequence containing information about the
error encountered.
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="ILLEGAL_BUILTIN">[<i>proc</i>]<br>illegal_builtin</a> ( sequence builtin )</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
This procedure can be used to remove the ability of evaluated code
from using builtin routines.  Pass the name of the builtin routine, or a
sequence of builtin routines, and if any code calls that routine, an
illegal call error will occur.  See the predefined lists supplied in illegal.e.
For a full list of builtins that can be declared illegal, see keylist.e (with the addition
of the question mark: "?").
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#NEW_ENV">new_env</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="NEW_ENV">[<i>func</i>]<br>new_env</a> ()</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
Creates a new scripting environment.  The return value is the handle of the environment.
This environment will be completely separate from other scripting environments.  Note that
the initial environment is automatically set up for you.
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#SWITCH_ENV">switch_env</a>
<hr>
<h4>Embedding<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SWITCH_ENV">[<i>proc</i>]<br>switch_env</a> ( integer env )</h2>
Category: <a href="#EMBEDDING">Embedding</a><br>
</p>
<p><p><p>
Saves the current environment and switches to the specified environment.
</p>
<p>See Also: 
<a href="#CLEANUP_DEBUGGER">cleanup_debugger</a>,
<a href="#CLEAR_ENV">clear_env</a>,
<a href="#DO_EVAL">do_eval</a>,
<a href="#EMBED_ROUTINE">embed_routine</a>,
<a href="#GET_CURRENT_ENV">get_current_env</a>,
<a href="#GET_EVAL_ERR">get_eval_err</a>,
<a href="#ILLEGAL_BUILTIN">illegal_builtin</a>,
<a href="#NEW_ENV">new_env</a>
<hr>
