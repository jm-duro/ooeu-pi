<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<link rel="stylesheet" type="text/css" href="docs.css">
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Binder and Shrouder Formats</title>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2006/10/13 at 09h28m39 -->
<style>h4 {text-align: right}</style>
<title>Binder and Shrouder Formats</title>
</head>
<body>
<div id = "Content">
<h4>Binder and Shrouder Formats<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<div id="Header"><a name="BINDER_AND_SHROUDER_FORMAT">Binder and Shrouder Formats</a></div>
<p><h3>How are shrouded files saved?
</h3><br>
<p>
There are two things saved when binding or shrouding (binding is just adding the shrouded
code to the end of the executable): the symbol table, and the list of line numbers.  The
symbol table (global sequence SymTab) holds all of the data and IL code.  The line numbers
(global sequence slist) give information for error dumps.  Normally, slist also holds the
actual text of each line, but this is currently not saved, unless the '-c' option is
used, and 'with trace' is turned on.
<p>
These are stored in a simple binary format to save space and time.  The compress() and
decompress() routines from database.e have been adapted to save Euphoria objects.  When the
required size of a data element is known in advance, only that many bytes are used.  If the
size may grow (i.e., symbol table entries) beyond a fixed amount, then the compression
routines are used.  Following is the structure of a shrouded .oe file (see sequencef.e
 for the details on reading/writing): 
<ul>
 <li> 4 bytes: magic number
 <li> 1 byte: Shroud version
 <li> 1 byte: full_debug
 <li> 1 byte: eval in use (so need to rebuild the hash table, and need variable names)
 <li> Compressed number of entries
 <ul> <li> Each entry:
 <li> 1 byte length of final sequence (corresponds to SIZEOF_XXX_ENTRY constants in global.e)
 <li> If length > 0:
 <ul><ul> <li> Length = 5 (constant): compressed euphoria object
 <li> Length > 5 (routine or variable)
 <ul> <li> S_OBJ != NOVALUE: 1 & compressed euphoria object
 <li> 1 byte: 0
 </ul></ul> 
 <li> Compressed symtab_index of S_NEXT
 <li> 1 byte: S_MODE
 <li> 1 byte: S_SCOPE
 <li> If length > SIZEOF_CONSTANT:
 <ul> <li> 1 byte: S_FILE_NO
 <li> If full_debug or use_eval: Compressed S_NAME
 <li> Compressed S_TOKEN
 <li> Compressed S_VTYPE
 <li> If length > S_VTYPE
 <ul> <li> Compressed S_CODE
 <li> Compressed S_LINETAB
 <li> Compressed S_FIRSTLINE
 <li> Compressed S_TEMPS
 <li> 1 byte: S_NUM_ARGS
 <li> Compressed S_GOTO
 <li> Compressed S_BYREF
 </ul></ul></ul></ul> 
 <li> Compressed list of file names
 <li> Compressed length of global sequence slist
 <li> If full_debug = 1:
 <ul> <li> For each element of slist)
 <ul> <li> Compressed source line
 <li> Compressed local line number
 <li> Compressed file number</ul></ul>
 <li> If full_debug = 0:
 <ul> <li> Compressed number of entries
 <li> Each entry:
 <ul> <li> Compressed {file number, until line}.  This is used for trace backs so that
the correct line and file are identified.  Can save up to 20% on the size of
the shrouded file size.
 </ul></ul></ul> 
	
	
When bound, this code is tacked onto the end of the executable that was run.  After this,
the absolute offset of the start of the bound code is written as a 4-byte integer, followed
by the text "oe bound executable".  Upon startup, the executable is checked to look for this
string, and if found, the shrouded code is loaded.
<p>
Shrouded files are saved with an oe extension.  The interpreter checks the extension upon
startup, and loads the shrouded code rather than trying to parse the file.
<p>
Before the shrouded code is saved, the interpreter attempts to remove as many unused constants,
routines and variables as possible.  Since the symbol table contains 'pointers' to different
entries, these deleted symbols have to be maintained.  The symbols are represented in the
shrouded symbol table as entries with a length of 0.

</p>
<hr>
